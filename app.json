[{"name":"app.R","content":"rm(list = ls())\nlibrary(shiny)\noptions(shiny.maxRequestSize = 100 * 1024^2)\n\n\n# define stuff -----------------------------------------------------------------\n## max iterations\nmaxiter <- 250\n\n## true functions\nfbl1 <- function(t) -2 - 0.5*log(t)\nfbl2 <- function(t) -3 - 0.5*log(t)\nfbl3 <- function(t) -4 - 0.5*log(t)\nfx1 <- function(x1) 0.5*x1\nfx2 <- function(x2) 1.5*sin(x2)\nfx3 <- function(x3) x3^2/6 - 1.5\nfx4 <- function(x4) sin(2*(4*x4-2))+2*exp(-(16^2)*(x4-0.5)^2)\n\n## setting functions\ntrans2sd <- function(x, sd = 1) (sd*x)/sd(unique(x))\ndemean <- function(x) x - mean(x)\n\n## x values\ngetx <- function(var) {\n  if (var == 't') {\n    seq(1, 20, length.out = 100)\n  } else if (var == 'x4') {\n    seq(0, 1, length.out = 100)\n  } else {\n    seq(-3, 3, length.out = 100)\n  }\n}\n\n## true effect\ngettrueff <- function(x, var, bali, sd) {\n  if(var == 't' & bali == -2) y <- demean(fbl1(x))\n  if(var == 't' & bali == -3) y <- demean(fbl2(x))\n  if(var == 't' & bali == -4) y <- demean(fbl3(x))\n  if(var == 'x1') y <- demean(trans2sd(fx1(x), sd))\n  if(var == 'x2') y <- demean(trans2sd(fx2(x), sd))\n  if(var == 'x3') y <- demean(trans2sd(fx3(x), sd))\n  if(var == 'x4') y <- demean(trans2sd(fx4(x), sd))\n  if(var %in% paste0('n', 1:6)) y <- rep(0, 100)\n  return(y)\n}\n\n## plot options and nice names\ncoleffects <- c(hcl.colors(8, \"YlGnBu\")[2], hcl.colors(8, \"YlOrRd\")[2])\nnames(coleffects) <- c('true', 'esti')\nshinymods <- c('glm' = 'GLM', \n               'bam' = 'BAM', \n               'bbfit' = 'BBFIT')\nshinyvars <- c('t' = 'Baseline', \n               'x1' = 'Linear', \n               'x2' = 'Sinus', \n               'x3' = 'Squared',\n               'x4' = 'Complex',\n               setNames(paste('Noise', 1:6), paste0('n', 1:6)))\n\n\n############################################################################\n# # testing\n# dat <- readRDS(file = '~/work/bb4sa/code/98-shiny/bb4sa-shinylive_data/sim_ind_5000_bali_-3_sd_0.5_spaeff_FALSE.rds')\n# maxiter <- 250\n# input <- list(model = 'bbfit',\n#               variable = 't',\n#               rep = 100,\n#               plottype = 'Overlay',\n#               plotmean = TRUE,\n#               plotquants = TRUE,\n#               plottrue = TRUE,\n#               customy = TRUE,\n#               ymin = -2, ymax = 2)\n# rv <- list(stop = TRUE,\n#            dat = NULL,\n#            set = list(NA),\n#            eff = list(NA),\n#            x = NA,\n#            teff = NA,\n#            bias = list(NA))\n############################################################################\n\n\n# ui ---------------------------------------------------------------------------\nui <- fluidPage(\n  titlePanel(\n    div(HTML(\"Appendix of <em>Simultaneous estimation and model choice for \n             big discrete time-to-event data with additive predictors<\/em>\"))\n  ),\n  \n  sidebarLayout(\n    sidebarPanel(\n      ## file upload and start button\n      fluidRow(\n        column(8, fileInput(\"rdsfile\", \"Upload RDS-File\")),\n        column(4, div(style = \"margin-top: 25px;\", actionButton(\"startplot\", \"Plot\")))\n      ),\n      \n      ## model selection\n      selectInput(\"model\", \"Model:\", \n                  choices = setNames(names(shinymods), shinymods), \n                  selected = 'bbfit'),\n      \n      ## variable selection\n      selectInput(\"variable\", \"Variable:\", \n                  choices = setNames(names(shinyvars), shinyvars),\n                  selected = 't'),\n      \n      ## replications\n      numericInput(\"rep\", \"Replication:\", \n                   value = 1, min = 1, max = 250, step = 1),\n      \n      ## plot specs\n      selectInput(\"plottype\", \"Plotting option:\",\n                  choices = c(\"Overlay\", \"Separate\"),\n                  selected = \"Overlay\"),\n      \n      conditionalPanel(\n        condition = \"input.plottype == 'Overlay'\",\n        checkboxInput(\"plotmean\", \"Plot mean\", value = TRUE),\n        checkboxInput(\"plotquants\", \"Plot quantiles\", value = TRUE),\n      ),\n      \n      checkboxInput(\"plottrue\", \"Plot true/zero line\", value = TRUE),\n      \n      checkboxInput(\"customy\", \"Custom Y-axis limits\", value = TRUE),\n      \n      conditionalPanel(\n        condition = \"input.customy == true\",\n        numericInput(\"ymin\", \"Y-axis min:\", value = -2, step = 0.2),\n        numericInput(\"ymax\", \"Y-axis max:\", value = 2, step = 0.2)\n      )\n    ),\n    \n    mainPanel(\n      plotOutput(\"plotout\", height = \"760px\")\n    )\n  )\n)\n\n# server\nserver <- function(input, output, session) {\n  \n  ## define reactive values\n  rv <- reactiveValues(stop = TRUE, \n                       dat = NULL,\n                       set = NULL,\n                       eff = NULL,\n                       x = NULL,\n                       teff = NULL,\n                       bias = NULL)\n  \n  ## load data\n  observeEvent(input$rdsfile, {\n    req(input$rdsfile)\n    rv$dat <- readRDS(input$rdsfile$datapath)\n    rv$stop <- TRUE\n  }, ignoreInit = TRUE)\n  \n  ## compute everything if model or variable changes\n  observeEvent(list(input$rdsfile, input$model, input$variable), {\n    \n    ## data\n    dat <- rv$dat\n    \n    ## extract settings\n    set <- dat[[1]]$setting\n    if(set$sd == 0) set$sd <- 0.5 # saveed 0.5 as 0\n    rv$set <- set\n    \n    ## preload effects\n    eff <- lapply(1:maxiter, function(r) {\n      fi <- paste0('sim_ind_', set$ind,\n                   '_bali_', set$bali,\n                   '_sd_', set$sd,\n                   '_spaeff_', set$spaeff,\n                   '_mod_', input$model,\n                   '_rep_', sprintf(\"%03d\", r))\n      y <- dat[[fi]]$pred.eff[[input$variable]]\n      if(length(y) == 1) y <- rep(y[1], 100)\n      return(y)\n    })\n    rv$eff <- eff\n    \n    ## x and true effect\n    x <- getx(input$variable)\n    rv$x <- x\n    teff <- gettrueff(x, input$variable, set$bali, set$sd)\n    rv$teff <- teff\n    \n    ## bias\n    bias <- lapply(1:maxiter, function(r) {eff[[r]] - teff})\n    rv$bias <- bias\n    \n    ## set plotting to stop\n    # rv$stop <- TRUE\n  }, ignoreInit = TRUE)\n  \n  \n  ## start plotting if plot button is pressed\n  observeEvent(input$startplot, {\n    rv$stop <- FALSE\n  }, ignoreInit = TRUE)\n  \n  \n  ## plot effect\n  output$plotout <- renderPlot({\n    if(rv$stop) {\n      ## if settings change, press button to start plotting\n      par(mfrow = c(1, 1), mar = c(0, 0, 0, 0))\n      plot.new()\n      text(0.5, 0.5, 'Press \"Plot\" to start plotting.', cex = 1.5)\n    } else if(is.null(rv$dat) |\n              !input$model %in% c('glm', 'bam', 'bbfit') |\n              !input$variable %in% c('t', 'x1', 'x2', 'x3', 'x4', paste0('n', 1:6)) |\n              is.null(input$rep) | is.na(input$rep) | \n              input$rep < 1 | input$rep > maxiter |\n              is.null(input$ymin) | is.na(input$ymin) |\n              is.null(input$ymax) | is.na(input$ymax)){\n      ## if file not found plot text that says that file not found\n      ## or setting is not available\n      par(mfrow = c(1, 1), mar = c(0, 0, 0, 0))\n      plot.new()\n      text(0.5, 0.5, 'Error: Check file and settings!', cex = 1.5)\n    } else {\n      ## get everything\n      y <- rv$eff[[input$rep]]\n      x <- rv$x\n      yt <- rv$teff\n      yb <- rv$bias[[input$rep]]\n      eff <- rv$eff\n      bias <- rv$bias\n      set <- rv$set\n      \n      ## custom y limits\n      ylimits <- if(input$customy) {\n        c(input$ymin, input$ymax)\n      } else {c(min(y, yb, yt), max(y, yb, yt))}\n      \n      ## define info for legend\n      le <- list()\n      le$le <- c(paste0(\"Estimated (Rep.: \", input$rep, \")\"), \n                 paste0(\"Estimated (Rep.: \", ifelse(input$rep == 1, \"-\", paste0('1-',input$rep-1)), \")\"),\n                 \"Mean of estimated\",\n                 \"Q2.5/97.5 of estimated\",\n                 \"True/Zero line\")\n      le$lt <- c(1, 1, 1, 2, 1)\n      le$co <- c('black', 'lightgrey', \n                 coleffects[['esti']], coleffects[['esti']], \n                 coleffects[['true']])\n      \n      ## plot par\n      par(mfrow = c(2, 1),\n          mar = c(2.1, 2.1, 2.1, 1.1),\n          oma = c(0, 0, 0, 11))\n      \n      ## plot estimated effects separate or as overlay\n      if (input$plottype == 'Separate') {\n        plot(x, y, type = \"l\", ylim = ylimits,\n             xlab = NA, ylab = NA)\n        le$i <- 1\n        \n      } else if(input$plottype == 'Overlay') {\n        if(input$rep == 1) {\n          plot(x, y, type = \"l\", ylim = ylimits,\n               xlab = NA, ylab = NA)\n        } else {\n          plot(x, eff[[1]], type = \"n\", ylim = ylimits, \n               xlab = NA, ylab = NA, col = 'lightgrey')\n          matlines(x, do.call(cbind, eff[2:(input$rep-1)]), \n                   col = 'lightgrey', lty = 1)\n          lines(x, y)\n        }\n        le$i <- 1:2\n        \n        # plot mean of reps 1-current rep\n        if(input$plotmean) {\n          lines(x, rowMeans(do.call(cbind, eff[1:input$rep])),\n                col = coleffects[['esti']], lty = 1, lwd = 2)\n          le$i <- 1:3\n        }\n        if(input$plotquants) {\n          cis <- apply(do.call(cbind, eff[1:input$rep]),\n                       1, quantile, probs = c(0.025, 0.975))\n          lines(x, cis[1, ],\n                col = coleffects[['esti']], lty = 2, lwd = 2)\n          lines(x, cis[2, ],\n                col = coleffects[['esti']], lty = 2, lwd = 2)\n          le$i <- 1:4\n        }\n      }\n      \n      ## plot true effect\n      if(input$plottrue) {\n        lines(x, yt, col = coleffects[['true']], \n              lty = 1, lwd = 2)\n        le$i <- c(le$i, 5)\n      }\n      \n      ## plot adjusted legend\n      legend(par('usr')[2], par('usr')[4],\n             bty = 'n', xpd = NA,\n             legend = c(\n               paste0('Model = ', shinymods[input$model]),\n               paste0('Variable = ', shinyvars[input$variable]),\n               '',\n               paste0('Individuals = ', set$ind),\n               paste0('Baseline = ', set$bali),\n               paste0('SD = ', set$sd),\n               paste0('Spatial effect = ', set$spaeff),\n               '',\n               le$le[le$i]\n             ),\n             lty = c(rep(NA, 8), le$lt[le$i]),\n             col = c(rep(NA, 8), le$co[le$i]),\n             y.intersp = 1.2)\n      \n      ## plot heading\n      mtext(\"Effect\", side = 3, line = 0.5, adj = 0, cex = 1.2)\n      \n      \n      ## plot estimated bias separate or as overlay\n      if (input$plottype == 'Separate') {\n        plot(x, yb, type = \"l\", ylim = ylimits,\n             xlab = NA, ylab = NA)\n        \n      } else if(input$plottype == 'Overlay') {\n        if(input$rep == 1) {\n          plot(x, yb, type = \"l\", ylim = ylimits,\n               xlab = NA, ylab = NA)\n        } else {\n          plot(x, bias[[1]], type = \"n\", ylim = ylimits, \n               xlab = NA, ylab = NA, col = 'lightgrey')\n          matlines(x, do.call(cbind, bias[2:(input$rep-1)]), \n                   col = 'lightgrey', lty = 1)\n          lines(x, yb)\n        }\n        \n        ## plot mean of reps 1-current rep\n        if(input$plotmean) {\n          lines(x, rowMeans(do.call(cbind, bias[1:input$rep])),\n                col = coleffects[['esti']], lty = 1, lwd = 2)\n        }\n        if(input$plotquants) {\n          cis <- apply(do.call(cbind, bias[1:input$rep]),\n                       1, quantile, probs = c(0.025, 0.975))\n          lines(x, cis[1, ],\n                col = coleffects[['esti']], lty = 2, lwd = 2)\n          lines(x, cis[2, ],\n                col = coleffects[['esti']], lty = 2, lwd = 2)\n        }\n      }\n      \n      ## plot true effect\n      if(input$plottrue) {\n        lines(x, rep(0, 100), col = coleffects[['true']], \n              lty = 1, lwd = 2)\n      }\n      \n      ## plot heading\n      mtext(\"Bias\", side = 3, line = 0.5, adj = 0, cex = 1.2)\n    }\n  })\n}\n\nshinyApp(ui, server)","type":"text"}]
