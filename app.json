[{"name":"app.R","content":"library(shiny)\noptions(shiny.maxRequestSize = 100 * 1024^2)\n\n\n# define stuff\nmaxiter <- 250\nfbl1 <- function(t) -2 - 0.5*log(t)\nfbl2 <- function(t) -3 - 0.5*log(t)\nfbl3 <- function(t) -4 - 0.5*log(t)\nfx1 <- function(x1) 0.5*x1\nfx2 <- function(x2) 1.5*sin(x2)\nfx3 <- function(x3) x3^2/6 - 1.5\nfx4 <- function(x4) sin(2*(4*x4-2))+2*exp(-(16^2)*(x4-0.5)^2)\ntrans2sd <- function(x, sd = 1) (sd*x)/sd(unique(x))\ndemean <- function(x) x - mean(x)\ncoleffects <- c(hcl.colors(8, \"YlGnBu\")[2], hcl.colors(8, \"YlOrRd\")[2])\nnames(coleffects) <- c('true', 'esti')\nshinymods <- c('glm' = 'GLM', \n               'bam' = 'BAM', \n               'bbfit' = 'BBFIT')\nshinyvars <- c('t' = 'Baseline', \n               'x1' = 'Linear', \n               'x2' = 'Sinus', \n               'x3' = 'Squared',\n               'x4' = 'Complex',\n               setNames(paste('Noise', 1:6), paste0('n', 1:6)))\n\n\n# ui\nui <- fluidPage(\n  titlePanel(\n    div(HTML(\"Appendix of <em>Simultaneous estimation and model choice for \n             big discrete time-to-event data with additive predictors<\/em>\"))\n  ),\n  \n  sidebarLayout(\n    sidebarPanel(\n      ## file upload\n      fileInput(\"rdsfile\", \"Upload RDS-File\"),\n      \n      ## model selection\n      selectInput(\"model\", \"Model:\", \n                  choices = setNames(names(shinymods), shinymods), \n                  selected = 'bbfit'),\n      \n      ## variable selection\n      \n      selectInput(\"variable\", \"Variable:\", \n                  choices = setNames(names(shinyvars), shinyvars),\n                  selected = 't'),\n      \n      ## plot specs\n      selectInput(\"plottype\", \"Plotting option:\",\n                  choices = c(\"Overlay\", \"Separate\"),\n                  selected = \"Overlay\"),\n      \n      numericInput(\"wait\", \"Wait:\", value = 0.1, min = 0.1, max = 2, step = 0.1), ######## change value to 1 after testing\n      \n      conditionalPanel(\n        condition = \"input.plottype == 'Separate'\",\n        checkboxInput(\"plotspecrep\", \"Plot specific replication\", value = FALSE),\n      ),\n      \n      conditionalPanel(\n        condition = \"input.plottype == 'Separate' && input.plotspecrep == true\",\n        numericInput(\"specrep\", \"Replication:\", \n                     value = 100, min = 1, max = 250, step = 1),\n      ),\n      \n      conditionalPanel(\n        condition = \"input.plottype == 'Overlay'\",\n        checkboxInput(\"plotmean\", \"Plot mean\", value = TRUE),\n        checkboxInput(\"plotquants\", \"Plot quantiles\", value = TRUE),\n      ),\n      \n      checkboxInput(\"plottrue\", \"Plot true/zero line\", value = TRUE),\n      \n      checkboxInput(\"customy\", \"Custom Y-axis limits\", value = TRUE),\n      \n      conditionalPanel(\n        condition = \"input.customy == true\",\n        numericInput(\"ymin\", \"Y-axis min:\", value = -2, step = 0.2),\n        numericInput(\"ymax\", \"Y-axis max:\", value = 2, step = 0.2)\n      ),\n      \n      ## start plot button\n      actionButton(\"startplot\", \"Plot\")\n    ),\n    \n    mainPanel(\n      plotOutput(\"plotout\", height = \"760px\")\n    )\n  )\n)\n\n# server\nserver <- function(input, output, session) {\n  \n  ## rvs\n  rv <- reactiveValues(i = 0, stop = FALSE, \n                       eff = list(), bias = list())\n  \n  ## data\n  getdata <- reactive({\n    req(input$rdsfile)\n    readRDS(input$rdsfile$datapath)\n  })\n  \n  \n  ## plot effect\n  output$plotout <- renderPlot({\n    if (rv$i > 0 && !rv$stop) {\n      \n      ## read\n      datall <- getdata()\n      \n      ## ind and file path\n      ind <- datall[[1]]$setting$ind\n      bali <- datall[[1]]$setting$bali\n      setsd <- datall[[1]]$setting$sd\n      spaeff <- datall[[1]]$setting$spaeff\n      \n      ## rep to 3 digit number, e.g. 1 -> 001\n      if(input$plotspecrep) {\n        rc <- sprintf(\"%03d\", input$specrep)\n      } else {rc <- sprintf(\"%03d\", rv$i)}\n      \n      ## file name\n      fi <- paste0('sim_ind_', ind,\n                   '_bali_', bali,\n                   '_sd_', setsd,\n                   '_spaeff_', spaeff,\n                   '_mod_', input$model,\n                   '_rep_', rc)\n      \n      ## check if file exists and if true plot\n      if(!is.null(datall[[1]])) {\n        \n        ## subset\n        dat <- datall[[fi]]\n        y <- dat$pred.eff[[input$variable]]\n        if(length(y) == 1) y <- rep(y[1], 100)\n        \n        ## matching x\n        x <- if (input$variable == 't') {\n          seq(1, 20, length.out = 100)\n        } else if (input$variable == 'x4') {\n          seq(0, 1, length.out = 100)\n        } else {\n          seq(-3, 3, length.out = 100)\n        }\n        \n        ## true effect\n        if(input$variable == 't' & bali == -2) yt <- demean(fbl1(x))\n        if(input$variable == 't' & bali == -3) yt <- demean(fbl2(x))\n        if(input$variable == 't' & bali == -4) yt <- demean(fbl3(x))\n        if(input$variable == 'x1') yt <- demean(trans2sd(fx1(x), setsd))\n        if(input$variable == 'x2') yt <- demean(trans2sd(fx2(x), setsd))\n        if(input$variable == 'x3') yt <- demean(trans2sd(fx3(x), setsd))\n        if(input$variable == 'x4') yt <- demean(trans2sd(fx4(x), setsd))\n        if(input$variable %in% paste0('n', 1:6)) yt <- rep(0, 100)\n        \n        ## bias\n        yb <- y - yt\n        \n        ## save of previous reps\n        rv$eff[[rv$i]] <- y\n        rv$bias[[rv$i]] <- yb\n        \n        ## custom y limits\n        ylimits <- if(input$customy) {\n          c(input$ymin, input$ymax)\n        } else {c(min(y, yb, yt), max(y, yb, yt))}\n        \n        ## define info for legend\n        le <- list()\n        le$le <- c(paste0(\"Estimated (Rep.: \", rv$i, \")\"), \n                   paste0(\"Estimated (Rep.: \", ifelse(rv$i == 1, \"-\", paste0('1-',rv$i-1)), \")\"),\n                   \"Mean of estimated\",\n                   \"Q2.5/97.5 of estimated\",\n                   \"True/Zero line\")\n        le$lt <- c(1, 1, 1, 2, 1)\n        le$co <- c('black', 'lightgrey', \n                   coleffects[['esti']], coleffects[['esti']], \n                   coleffects[['true']])\n        \n        ## plot par\n        par(mfrow = c(2, 1),\n            mar = c(2.1, 2.1, 2.1, 1.1),\n            oma = c(0, 0, 0, 11))\n        \n        ## plot estimated effects separate or as overlay\n        if (input$plottype == 'Separate' | (input$plottype == 'Separate' & input$plotspecrep)) {\n          plot(x, y, type = \"l\", ylim = ylimits,\n               xlab = NA, ylab = NA,\n               main = 'Effect', font.main = 1)\n          le$i <- 1\n          \n        } else if(input$plottype == 'Overlay') {\n          if(rv$i == 1) {\n            plot(x, y, type = \"l\", ylim = ylimits,\n                 xlab = NA, ylab = NA,\n                 main = 'Effect', font.main = 1)\n          } else {\n            plot(x, rv$eff[[1]], type = \"n\", ylim = ylimits, \n                 xlab = NA, ylab = NA, col = 'lightgrey',\n                 main = 'Effect', font.main = 1)\n            for(i in 2:(rv$i-1)) {\n              lines(x, rv$eff[[i]], col = 'lightgrey')\n            }\n            lines(x, y)\n          }\n          le$i <- 1:2\n          \n          ## plot mean of reps 1-current rep\n          if(input$plotmean) {\n            lines(x, apply(do.call(cbind, rv$eff), 1, mean), \n                  col = coleffects[['esti']], lty = 1, lwd = 2)\n            le$i <- 1:3\n          }\n          if(input$plotquants) {\n            lines(x, apply(do.call(cbind, rv$eff), 1, FUN = function(x) quantile(x, probs = 0.025)), \n                  col = coleffects[['esti']], lty = 2, lwd = 2)\n            lines(x, apply(do.call(cbind, rv$eff), 1, FUN = function(x) quantile(x, probs = 0.975)), \n                  col = coleffects[['esti']], lty = 2, lwd = 2)\n            le$i <- 1:4\n          }\n        }\n        \n        ## plot true effect\n        if(input$plottrue) {\n          lines(x, yt, col = coleffects[['true']], \n                lty = 1, lwd = 2)\n          le$i <- c(le$i, 5)\n        }\n        \n        ## plot adjusted legend\n        legend(par('usr')[2], par('usr')[4],\n               bty = 'n', xpd = NA,\n               legend = c(\n                 paste0('Model = ', shinymods[input$model]),\n                 paste0('Variable = ', shinyvars[input$variable]),\n                 '',\n                 paste0('Individuals = ', ind),\n                 paste0('Baseline = ', bali),\n                 paste0('SD = ', setsd),\n                 paste0('Spatial effect = ', spaeff),\n                 '',\n                 le$le[le$i]\n               ),\n               lty = c(rep(NA, 8), le$lt[le$i]),\n               col = c(rep(NA, 8), le$co[le$i]),\n               y.intersp = 1.2)\n        \n        \n        ## plot estimated bias separate or as overlay\n        if (input$plottype == 'Separate' | (input$plottype == 'Separate' & input$plotspecrep)) {\n          plot(x, yb, type = \"l\", ylim = ylimits,\n               xlab = NA, ylab = NA,\n               main = 'Bias', font.main = 1)\n          \n        } else if(input$plottype == 'Overlay') {\n          if(rv$i == 1) {\n            plot(x, yb, type = \"l\", ylim = ylimits,\n                 xlab = NA, ylab = NA,\n                 main = 'Bias', font.main = 1)\n          } else {\n            plot(x, rv$bias[[1]], type = \"n\", ylim = ylimits, \n                 xlab = NA, ylab = NA, col = 'lightgrey',\n                 main = 'Bias', font.main = 1)\n            for(i in 2:(rv$i-1)) {\n              lines(x, rv$bias[[i]], col = 'lightgrey')\n            }\n            lines(x, yb)\n          }\n          \n          ## plot mean of reps 1-current rep\n          if(input$plotmean) {\n            lines(x, apply(do.call(cbind, rv$bias), 1, mean), \n                  col = coleffects[['esti']], lty = 1, lwd = 2)\n          }\n          if(input$plotquants) {\n            lines(x, apply(do.call(cbind, rv$bias), 1, FUN = function(x) quantile(x, probs = 0.025)), \n                  col = coleffects[['esti']], lty = 2, lwd = 2)\n            lines(x, apply(do.call(cbind, rv$bias), 1, FUN = function(x) quantile(x, probs = 0.975)), \n                  col = coleffects[['esti']], lty = 2, lwd = 2)\n          }\n        }\n        \n        ## plot true effect\n        if(input$plottrue) {\n          lines(x, rep(0, 100), col = coleffects[['true']], \n                lty = 1, lwd = 2)\n        }\n        \n      } else {\n        ## if file not found plot text that says that file not found\n        ## or setting is not available\n        par(mfrow = c(1, 1), mar = c(0, 0, 0, 0))\n        plot.new()\n        text(0.5, 0.5, 'File not found/setting not availiable!', cex = 1.5)\n        text(0.5, 0.5, paste0('File: ', fi), cex = 0.9)\n      }\n    } else {\n      ## if settings change, press button to start plotting\n      par(mfrow = c(1, 1), mar = c(0, 0, 0, 0))\n      plot.new()\n      text(0.5, 0.5, 'Press \"Plot\" to start plotting.', cex = 1.5)\n    }\n  })\n  \n  ## reset and stop plotting on any input change\n  observeEvent(list(input$folderpath, input$model, input$variable, \n                    input$numindividuals, input$bali, input$setsd,\n                    input$wait, input$plotspecrep, input$plottype), {\n                      rv$stop <- TRUE\n                      rv$i <- 0\n                      rv$eff <- list()\n                      rv$bias <- list()\n                    }, ignoreInit = TRUE)\n  \n  observeEvent(input$plottype, {\n    updateCheckboxInput(session, \"plotspecrep\", value = FALSE)\n    rv$stop <- TRUE\n    rv$i <- 0\n    rv$eff <- list()\n    rv$bias <- list()\n  }, ignoreInit = TRUE)\n  \n  ## start plotting if plot button is pressed\n  observeEvent(input$startplot, {\n    rv$stop <- FALSE\n    rv$i <- 0\n    rv$eff <- list()\n    rv$bias <- list()\n    observe({\n      isolate({rv$i <- rv$i + 1})\n      if(input$plottype == \"Separate\" & input$plotspecrep) {\n        rv$i <- input$specrep\n        invalidateLater(input$wait * 700, session)\n      } else if (isolate(rv$i) < maxiter && !isolate(rv$stop)) {\n        invalidateLater(input$wait * 700, session)\n      }\n    })\n  }, ignoreInit = TRUE)\n  \n}\n\nshinyApp(ui, server)","type":"text"}]
